#!/usr/bin/env bash

# blackboard - the simple logger
#
# GNU General Public License v3.0 
#
# Copyright (c) 2021 Advait Raykar
# Personal Page: https//advait.live


RED='\033[0;31m'
GREEN='\x1b[1;32m'
NC='\033[0m'

if [ ! -d ~/.blackboard ]; then
  	echo "Blackboard folder doesn't exits, creating logger folder under ~/.blackboard"
	mkdir -p ~/.blackboard;
fi


# Adds the log in the format "Date, Activity, Time"
function add_log {

	for opt in "$@"
	do
		case $opt in
	    		-sat)
				echo "$(date +%F)", "$2", "$3", "satisfying" >> ~/.blackboard/timelog.txt
	      			exit
				;;
	    		-unsat)
				echo "$(date +%F)", "$2", "$3", "unsatisfying" >> ~/.blackboard/timelog.txt
	      			exit
				;;
	    		-indiff)
				echo "$(date +%F)", "$2", "$3", "indifferent" >> ~/.blackboard/timelog.txt
	      			exit
				;;
	  	esac
	done

	echo -e "${RED}You need to enter what you feel about the task.${NC}\n -unsat for unsatisfying  \n -sat for satisfying \n -indiff for indifferent"
}

#!/bin/sh
#
# percent  num  [title]
# percent  numerator denominator "title"
#
# Print an ASCII "percentage used" bargraph (50 chars long)
# centered on a normal 80 character TTY display. (72 columns)
# Optionally include a given title above the percentage bar.
#
# Idea by some unknown student at Griffith University
# Completely re-written several times by Anthony Thyssen
# Inital dependancy on perl added due to brain-dead MacOSX "expr"
#
function plot {
  PATH="/usr/ucb:/usr/bin:/usr/5bin:$PATH"
  export PATH

  # Check that it is a number
  arg1=`expr "$1" : '\(-*[0-9][0-9]*\)' 2>/dev/null`
  if [ ! "$arg1" ]; then
    echo >&2 "Percentage given is not a number!"
    echo >&2 "Usage: percent  number  [title]"
    echo >&2 "       percent  numerator denominator title"
    exit 10
  fi
  arg2=`expr "$2" : '\(-*[0-9][0-9]*\)' 2>/dev/null`

  # get the arguments
  case $# in
    1) percent=$arg1 ;;
    2) percent=$arg1; title="$2" ;;
    3) percent=`expr 100 \* $arg1 / $arg2`; title="$3" ;;
    *) echo >&2 "Usage: percent  num  [title]"
       exit 10 ;;
  esac

  # half the percentage value --> number chars!
  # figure out number of characters to output (100% = 50 char)
  chars=`expr "$percent" / 2 + 1`

  rule="|----+----+----+----+----|----+----+----+----+----|"
  char="#"; equal="|"; more=">"; less="<";
  B= N= Gon= Goff=

  # ----------------------------
  # Get terminal charactistics...
  if [ -t 1 -a "X$TERM" != "X" -a "X$TERM" != 'Xdumb' ]; then
    B="`tput bold 2>/dev/null`"        # bold ON
    N="`tput sgr0 2>/dev/null`"        # all attributes OFF

    # For get this, too many terminals don't do this right
    # As such I will handle specific terminals ourselves
    Gon="`tput smacs`"     # Graphic chars set ON
    Goff="`tput rmacs`"    # Graphic chars set OFF
    #tput enacs   # enable alturnative characters - ???

    case "$TERM" in
    vs100|xterm*)
      #Gon="(0"; Goff="(B"
      rule="${Gon}tqqqqnqqqqnqqqqnqqqqnqqqqnqqqqnqqqqnqqqqnqqqqnqqqqu${Goff}"
      char="a"; equal="x"; more=">"; less="<";
      ;;
    dtterm) # CDE Terminals do not have a graphic "a"!
      #Gon="(0"; Goff="(B"
      rule="${Gon}tqqqqnqqqqnqqqqnqqqqnqqqqnqqqqnqqqqnqqqqnqqqqnqqqqu${Goff}"
      char="#"; equal="|"; more=">"; less="<";
      ;;
    esac
  fi

  # ----------------------------
  # print the percentage bar
  over=`perl -e "print '$char' x 50, '$equal$more'"`
  line=`perl -e "print '$char' x 50, '$equal'"`

  if [ "$title" ]; then
    p=`perl -e '$p=(73-length("'"$title"'"))/2; $p = 0 if $p < 0; print " " x $p'`
    echo "$p$title"   # print the centered title
  fi

  # Rulers are 52 characters, figure out the indent prefix to use.
  # Prefix for rulers is one less so we can add an extra (below zero) character
  p=`perl -e "print ' ' x 9"`  # (72-52)/2 - 1  =>  9 character prefix
  echo "$p ${B}0$N   10   20   30   40   ${B}50$N   60   70   80   90   ${B}100$N"
  echo "$p $rule"

  # print the actual guage
  if [ $percent -lt 0 ]; then
    echo "$p$Gon$less$equal$Goff"
  elif [ $percent -eq 0 ]; then
    echo "$p $Gon$equal$Goff"
  elif [ $percent -gt 100 ]; then
    echo "$p $Gon$over$Goff"
  else
    # expr replaced by perl equivelent, due to brain dead MacOSX expr command
    #echo "$p$Gon`expr substr "$line" 1 $chars`$Goff"
    echo "$p $Gon"`perl -e "print substr('$line', 0, $chars)"`"$Goff"
  fi
}

function plot_stats {
  INDIFF=$(grep ' indifferent' ~/.blackboard/timelog.txt | grep "$1" | cut -d, -f3 | sed 's/.$//' | paste -sd+ - | bc)
  SAT=$(grep ' satisfying' ~/.blackboard/timelog.txt | grep "$1" | cut -d, -f3 | sed 's/.$//' | paste -sd+ - | bc)
  UNSAT=$(grep ' unsatisfying' ~/.blackboard/timelog.txt | grep "$1" | cut -d, -f3 | sed 's/.$//' | paste -sd+ - | bc)
  TOTAL=$(cat ~/.blackboard/timelog.txt | grep "$1"  | cut -d, -f3 | sed 's/.$//' | paste -sd+ - | bc)
  if [ "$TOTAL" == "" ]; then
    echo -e "${RED} No records found for that date ${NC}"
    exit
  fi

  echo -e "\n"
  if [ "$SAT" != "" ]; then
  	plot $(( $SAT*100/$TOTAL )) "Percentage of logged time spent in satisfying activities"
  	echo -e "\n"
  fi

  if [ "$UNSAT" != "" ]; then
  	plot $(( $UNSAT*100/$TOTAL )) "Percentage of logged time spent in unsatisfying activities"
  	echo -e "\n"
  fi

  if [ "$INDIFF" != "" ]; then
  	plot $(( $INDIFF*100/$TOTAL )) "Percentage of logged time spent in neutral activities"
  	echo -e "\n"
  fi
}



function show_logs {
	cat ~/.blackboard/timelog.txt | column -s, -t | less -#2 -N -S
}

function green_echo {
    echo -e "${GREEN}$1${NC}"
}

print_logo() {
	echo "      ____  _               _____ _  ______   ____          _____  _____      ";
	echo "     |  _ \| |        /\   / ____| |/ /  _ \ / __ \   /\   |  __ \|  __ \     ";
	echo "     | |_) | |       /  \ | |    | ' /| |_) | |  | | /  \  | |__) | |  | |    ";
	echo "     |  _ <| |      / /\ \| |    |  < |  _ <| |  | |/ /\ \ |  _  /| |  | |    ";
	echo "     | |_) | |____ / ____ \ |____| . \| |_) | |__| / ____ \| | \ \| |__| |    ";
	echo "  _  |____/|______/_/  _ \_\_____|_|\_\____/ \____/_/    \_\_|  \_\_____/     ";
	echo " | | | |              (_)               | |    | |                            ";
	echo " | |_| |__   ___   ___ _ _ __ ___  _ __ | | ___| | ___   __ _  __ _  ___ _ __ ";
	echo " | __| '_ \ / _ \ / __| | '_ \` _ \| '_ \| |/ _ \ |/ _ \ / _\` |/ _\` |/ _ \ '__|";
	echo " | |_| | | |  __/ \__ \ | | | | | | |_) | |  __/ | (_) | (_| | (_| |  __/ |   ";
	echo "  \__|_| |_|\___| |___/_|_| |_| |_| .__/|_|\___|_|\___/ \__, |\__, |\___|_|   ";
	echo "                                  | |                    __/ | __/ |          ";
	echo "                                  |_|                   |___/ |___/           ";

}

if [ "$1" == "" ]; then
	
	print_logo

	echo -e "\n\n\t--add or -a : To add an entry, run with '-a <activity> <timespent in mins> < -unsat | -sat | -indiff >'. Example:"
	green_echo "\t\tbb -a 'saw movie' 60m -unsat"
	echo -e "\n\t--show or -s: To see all the logs, run with '-s'. Example:"
	green_echo "\t\tbb -s"
  echo -e "\n\t--plot or -p: To see a graph of logs, run with '-p <yyyy-mm-dd>'. To see lifetime stats, pass no date.  Example:"
  green_echo "\t\tbb -p 2021-10-08\n\n"

  echo -e "\t${RED} NOTE: ${NC}You need to enter what you feel about the task.\n\t\t -unsat for unsatisfying  \n\t\t -sat for satisfying \n\t\t -indiff for indifferent"

fi
if [ "$1" == "-a" -o "$1" == "--add" ]; then
	add_log "$@"
fi
if [ "$1" == "-s" -o "$1" == "--show" ]; then
	show_logs
fi
if [ "$1" == "-p" -o "$1" == "--plot" ]; then
  plot_stats "$2"
fi

